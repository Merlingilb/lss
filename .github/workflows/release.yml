# This is a basic workflow to help you get started with Actions

name: Release

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ release ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [windows-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install networkx
        pip install tornado
        pip install matplotlib
        pip install pyyaml
        pip install pypiwin32
        pip install pefile
        pip install pyinstaller
    
    # Runs a single command using the runners shell
    - name: Run build.bat
      run: ./build.bat
    
    - name: Copy files
      run: |
        mkdir .\archive
        mkdir .\archive\dist
        mkdir .\archive\dist\lss
        xcopy .\dist\lss\* .\archive\dist\lss\ /s /e
        xcopy .\wehren.csv .\archive\
        xcopy .\verbindungen.csv .\archive\
        xcopy .\settings.csv .\archive\
        xcopy .\start.bat .\archive\
    
    - uses: actions/upload-artifact@v1
      with:
        name: Feuerwachenplaner
        path: ./archive/
        
  release:
    
    runs-on: ubuntu-latest
    needs: build
    steps:
        
    - uses: actions/download-artifact@v1
      with:
        name: Feuerwachenplaner
    
    - name: Zip Folder
      run: zip -r Feuerwachenplaner.zip .
    
    - uses: actions/checkout@v2

    - name: get commit message
      run: |
         echo ::set-env name=commitmsg::$(git log --format=%B -n 1 ${{ github.event.after }})
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.commitmsg }}
        release_name: Release ${{ env.commitmsg }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./Feuerwachenplaner.zip
        asset_name: Feuerwachenplaner.zip
        asset_content_type: application/zip
